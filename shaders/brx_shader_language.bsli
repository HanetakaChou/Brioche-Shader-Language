//
// Copyright (C) YuqiaoZhang(HanetakaChou)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef _BRX_SHADER_LANGUAGE_BSLI_
#define _BRX_SHADER_LANGUAGE_BSLI_ 1

#if defined(__STDC__) || defined(__cplusplus)

#define brx_float float

#define brx_float2 DirectX::XMFLOAT2

#define brx_float3 DirectX::XMFLOAT3

#define brx_float4 DirectX::XMFLOAT4

#define brx_int int32_t

#define brx_uint uint32_t

#define brx_uint4 DirectX::XMUINT4

#define brx_column_major

#define brx_float4x4 DirectX::XMFLOAT4X4

#define brx_cbuffer(name, space, register) struct name

#define brx_read_only_byte_address_buffer(name, space, register)

#define brx_read_write_byte_address_buffer(name, space, register)

#define brx_write_only_byte_address_buffer(name, space, register)

#define brx_texture_2d(name, space, register)

#define brx_texture_2d_uint(name, space, register)

#define brx_texture_2d_array(name, space, register)

#define brx_texture_3d(name, space, register)

#define brx_texture_3d_uint(name, space, register)

#define brx_sampler_state(name, space, register)

#define brx_write_only_texture_2d(name, space, register)

#define brx_write_only_texture_2d_uint(name, space, register)

#define brx_write_only_texture_3d_float4(name, space, register)

#define brx_read_write_texture_3d_uint(name, space, register)

#define brx_write_only_texture_3d_uint(name, space, register)

#define brx_top_level_acceleration_structure(name, space, register)

#define brx_read_only_byte_address_buffer_table(name, space, register, count)

#define brx_read_write_byte_address_buffer_table(name, space, register, count)

#define brx_write_only_byte_address_buffer_table(name, space, register, count)

#define brx_texture_2d_table(name, space, register, count)

#define brx_texture_2d_uint_table(name, space, register, count)

#define brx_sampler_state_table(name, space, register, count)

#define brx_write_only_texture_2d_table(name, space, register, count)

#define brx_write_only_texture_2d_uint_table(name, space, register, count)

#define brx_top_level_acceleration_structure_table(name, space, register, count)

#define brx_read_only_byte_address_buffer_unbounded(name, space, register)

#define brx_texture_2d_unbounded(name, space, register)

#define brx_texture_2d_uint_unbounded(name, space, register)

#define brx_root_signature_root_parameter_begin(name)

#define brx_root_signature_root_parameter_split

#define brx_root_signature_root_parameter_end

#define brx_root_signature_root_cbv(set, binding)

#define brx_root_signature_root_descriptor_table_srv(set, binding, count)

#define brx_root_signature_root_descriptor_table_srv_unbounded(set, binding)

#define brx_root_signature_root_descriptor_table_sampler(set, binding, count)

#define brx_root_signature_root_descriptor_table_uav(set, binding, count)

#define brx_root_signature_root_descriptor_table_top_level_acceleration_structure(set, binding, count)

#elif defined(GL_SPIRV) || defined(VULKAN)

precision highp float;

precision highp int;

precision highp texture2D;

precision highp utexture2D;

precision highp texture3D;

precision highp sampler;

precision highp image2D;

precision highp uimage3D;

#extension GL_EXT_samplerless_texture_functions : enable

#extension GL_EXT_control_flow_attributes : enable

#if defined(BRX_ENABLE_WAVE_INTRINSICS) && BRX_ENABLE_WAVE_INTRINSICS

#extension GL_KHR_shader_subgroup_basic : enable

#extension GL_KHR_shader_subgroup_arithmetic : enable

#endif

#if defined(BRX_ENABLE_RAY_TRACING) && BRX_ENABLE_RAY_TRACING

// #extension GL_EXT_ray_tracing : enable

#extension GL_EXT_ray_query : enable

#extension GL_EXT_nonuniform_qualifier : enable

#endif

#define brx_bool bool

#define brx_bool4 bvec4

#define brx_true true

#define brx_false false

#define brx_float float

#define brx_float2 vec2

#define brx_float3 vec3

#define brx_float4 vec4

#define brx_float_inf (uintBitsToFloat(0x7F800000u))

#define brx_is_float_nan(x) (isnan(x))

#define brx_is_inf_nan(x) (isinf(x))

#define brx_int_as_float(x) (intBitsToFloat(x))

#define brx_uint_as_float(x) (uintBitsToFloat(x))

#define brx_double double

#define brx_double2 dvec2

#define brx_double3 dvec3

#define brx_double4 dvec4

#define brx_int int

#define brx_int2 ivec2

#define brx_int3 ivec3

#define brx_int4 ivec4

#define brx_float_as_int(x) (floatBitsToInt(x))

#define brx_uint uint

#define brx_uint2 uvec2

#define brx_uint3 uvec3

#define brx_uint4 uvec4

#define brx_float_as_uint(x) (floatBitsToUint(x))

#define brx_unpack_half2(x) (unpackHalf2x16(x))

#define brx_column_major layout(column_major)

#define brx_float3x3 mat3x3

#define brx_float3x4 mat4x3

#define brx_float4x4 mat4x4

#define brx_float3x3_from_columns(column0, column1, column2) mat3x3((column0), (column1), (column2))

#define brx_float3x3_from_rows(row0, row1, row2) mat3x3(vec3((row0).x, (row1).x, (row2).x), vec3((row0).y, (row1).y, (row2).y), vec3((row0).z, (row1).z, (row2).z))

#define brx_float3x3_get_column(m, i) ((m)[(i)])

#define brx_float3x3_get_row(m, i) (vec3(((m)[0][(i)]), ((m)[1][(i)]), ((m)[2][(i)])))

#if defined(BRX_ENABLE_RAY_TRACING) && BRX_ENABLE_RAY_TRACING

#define brx_ray_query rayQueryEXT

#endif

#define brx_cbuffer(name, space, register) layout(set = space, binding = register, std140) uniform name

#define brx_read_only_byte_address_buffer(name, space, register)                                        \
    layout(set = space, binding = register, std430) readonly buffer name##_T { uint _internal_data[]; } \
    name

#define brx_read_write_byte_address_buffer(name, space, register)                              \
    layout(set = space, binding = register, std430) buffer name##_T { uint _internal_data[]; } \
    name

#define brx_write_only_byte_address_buffer(name, space, register)                                        \
    layout(set = space, binding = register, std430) writeonly buffer name##_T { uint _internal_data[]; } \
    name

#define brx_texture_2d(name, space, register) layout(set = space, binding = register) uniform texture2D name

#define brx_texture_2d_uint(name, space, register) layout(set = space, binding = register) uniform utexture2D name

#define brx_texture_2d_array(name, space, register) layout(set = space, binding = register) uniform texture2DArray name

#define brx_texture_3d(name, space, register) layout(set = space, binding = register) uniform texture3D name

#define brx_texture_3d_uint(name, space, register) layout(set = space, binding = register) uniform utexture3D name

#define brx_sampler_state(name, space, register) layout(set = space, binding = register) uniform sampler name

#define brx_write_only_texture_2d(name, space, register) layout(set = space, binding = register) uniform writeonly image2D name

#define brx_write_only_texture_2d_uint(name, space, register) layout(set = space, binding = register) uniform writeonly uimage2D name

#define brx_write_only_texture_3d_float4(name, space, register) layout(set = space, binding = register) uniform writeonly image3D name

#define brx_read_write_texture_3d_uint(name, space, register) layout(r32ui, set = space, binding = register) uniform uimage3D name

#define brx_write_only_texture_3d_uint(name, space, register) layout(set = space, binding = register) uniform writeonly uimage3D name

#define brx_top_level_acceleration_structure(name, space, register) layout(set = space, binding = register) uniform accelerationStructureEXT name

#define brx_read_only_byte_address_buffer_table(name, space, register, count)                           \
    layout(set = space, binding = register, std430) readonly buffer name##_T { uint _internal_data[]; } \
    name[count]

#define brx_read_write_byte_address_buffer_table(name, space, register, count)                 \
    layout(set = space, binding = register, std430) buffer name##_T { uint _internal_data[]; } \
    name[count]

#define brx_write_only_byte_address_buffer_table(name, space, register, count)                           \
    layout(set = space, binding = register, std430) writeonly buffer name##_T { uint _internal_data[]; } \
    name[count]

#define brx_texture_2d_table(name, space, register, count) layout(set = space, binding = register) uniform texture2D name[count]

#define brx_texture_2d_uint_table(name, space, register, count) layout(set = space, binding = register) uniform utexture2D name[count]

#define brx_sampler_state_table(name, space, register, count) layout(set = space, binding = register) uniform sampler name[count]

#define brx_write_only_texture_2d_table(name, space, register, count) layout(set = space, binding = register) uniform writeonly image2D name[count]

#define brx_write_only_texture_2d_uint_table(name, space, register, count) layout(set = space, binding = register) uniform writeonly uimage2D name[count]

#define brx_top_level_acceleration_structure_table(name, space, register, count) layout(set = space, binding = register) uniform accelerationStructureEXT name[count]

#if defined(BRX_ENABLE_RAY_TRACING) && BRX_ENABLE_RAY_TRACING

#define brx_read_only_byte_address_buffer_unbounded(name, space, register)                              \
    layout(set = space, binding = register, std430) readonly buffer name##_T { uint _internal_data[]; } \
    name[]

#define brx_texture_2d_unbounded(name, space, register) layout(set = space, binding = register) uniform texture2D name[]

#define brx_texture_2d_uint_unbounded(name, space, register) layout(set = space, binding = register) uniform utexture2D name[]

#endif

#define brx_root_signature_root_parameter_begin(name)

#define brx_root_signature_root_parameter_split

#define brx_root_signature_root_parameter_end

#define brx_root_signature_root_cbv(space, register)

#define brx_root_signature_root_descriptor_table_srv(space, register, count)

#define brx_root_signature_root_descriptor_table_srv_unbounded(set, binding)

#define brx_root_signature_root_descriptor_table_sampler(space, register, count)

#define brx_root_signature_root_descriptor_table_uav(space, register, count)

#define brx_root_signature_root_descriptor_table_top_level_acceleration_structure(space, register, count)

#define brx_root_signature(macro, name)

#define brx_branch [[dont_flatten]]

#define brx_flatten [[flatten]]

#define brx_unroll [[unroll]]

#define brx_loop [[dont_unroll]]

#define brx_vertex_index gl_VertexIndex

#define brx_instance_index gl_InstanceIndex

#define brx_position gl_Position

#define brx_cull_distance gl_CullDistance

#define brx_sample_mask_in (gl_SampleMaskIn[0])

#define brx_frag_coord gl_FragCoord

#define brx_depth gl_FragDepth

#define brx_vertex_shader_parameter_begin(name)

#define brx_vertex_shader_parameter_split ;

#define brx_vertex_shader_parameter_end(name) \
    ;                                         \
    void name()

#define brx_vertex_shader_parameter_in_vertex_index const float _unused_in_vertex_index = -1.0

#define brx_vertex_shader_parameter_in_instance_index const float _unused_in_instance_index = -1.0

#define brx_vertex_shader_parameter_in(type, name, semantic) layout(location = semantic) in type name

#define brx_vertex_shader_parameter_out_position const float _unused_out_position = -1.0

#define brx_vertex_shader_parameter_out_cull_distance out float gl_CullDistance[2]

#define brx_vertex_shader_parameter_out(type, name, semantic) layout(location = semantic) out type name

#define brx_vertex_shader_parameter_flat_out(type, name, semantic) layout(location = semantic) flat out type name

#define brx_early_depth_stencil layout(early_fragment_tests) in;

#define brx_pixel_shader_parameter_begin(name)

#define brx_pixel_shader_parameter_split ;

#define brx_pixel_shader_parameter_end(name) \
    ;                                        \
    void name()

#define brx_pixel_shader_parameter_in_sample_mask_in const float _unused_in_sample_mask_in = -1.0

#define brx_pixel_shader_parameter_in_frag_coord const float _unused_in_frag_coord = -1.0

#define brx_pixel_shader_parameter_in_cull_distance in float gl_CullDistance[2]

#define brx_pixel_shader_parameter_in(type, name, semantic) layout(location = semantic) in type name

#define brx_pixel_shader_parameter_flat_in(type, name, semantic) layout(location = semantic) flat in type name

#define brx_pixel_shader_parameter_out_depth const float _unused_out_depth = -1.0

#define brx_pixel_shader_parameter_out(type, name, semantic) layout(location = semantic) out type name

#define brx_num_threads(x, y, z) layout(local_size_x = x, local_size_y = y, local_size_z = z) in;

#define brx_group_shared shared

#define brx_group_memory_barrier_with_group_sync() \
    memoryBarrierShared();                         \
    barrier()

#define brx_group_id gl_WorkGroupID

#define brx_group_thread_id gl_LocalInvocationID

#define brx_group_index gl_LocalInvocationIndex

#define brx_dispatch_thread_id gl_GlobalInvocationID

#define brx_compute_shader_parameter_begin(name)

#define brx_compute_shader_parameter_split ;

#define brx_compute_shader_parameter_end(name) \
    ;                                          \
    void name()

#define brx_compute_shader_parameter_in_group_id const float _unused_in_group_id = -1.0

#define brx_compute_shader_parameter_in_group_thread_id const float _unused_in_group_thread_id = -1.0

#define brx_compute_shader_parameter_in_group_index const float _unused_in_group_index = -1.0

#define brx_compute_shader_parameter_in_dispatch_thread_id const float _unused_in_dispatch_thread_id = -1.0

#define brx_array_constructor_begin(type, count) type[count](

#define brx_array_constructor_split ,

#define brx_array_constructor_end )

#define brx_mul(x, y) ((x) * (y))

#define brx_ddx(x) (dFdx((x)))

#define brx_ddy(x) (dFdy((x)))

#define brx_abs(x) (abs((x)))

#define brx_dot(x, y) (dot((x), (y)))

#define brx_min(x, y) (min((x), (y)))

#define brx_max(x, y) (max((x), (y)))

#define brx_cross(x, y) (cross((x), (y)))

#define brx_pow(x, y) (pow((x), (y)))

#define brx_ln(x) (log((x)))

#define brx_log2(x) (log2((x)))

#define brx_exp(x) (exp((x)))

#define brx_length(x) (length((x)))

#define brx_normalize(x) (normalize(x))

#define brx_cos(x) (cos((x)))

#define brx_sin(x) (sin((x)))

#define brx_acos(x) (acos((x)))

#define brx_atan2(x, y) (atan((x), (y)))

#define brx_sqrt(x) (sqrt((x)))

#define brx_rsqrt(x) (inversesqrt((x)))

#define brx_firstbithigh(value) (findMSB(value))

#define brx_reversebits(value) (bitfieldReverse(value))

#define brx_sign(x) (sign((x)))

#define brx_floor(x) (floor(x))

#define brx_frac(x) (fract(x))

#define brx_round(x) (round(x))

#define brx_all(x) (all(x))

#define brx_any(x) (any(x))

#define brx_less_than(x, y) (lessThan((x), (y)))

#define brx_greater_than(x, y) (greaterThan((x), (y)))

#define brx_greater_than_equal(x, y) (greaterThanEqual((x), (y)))

#define brx_clamp(x, min, max) (clamp((x), (min), (max)))

#define brx_lerp(x, y, s) (mix((x), (y), (s)))

#define brx_select_float(x, y, s) (mix((x), (y), (s)))

#define brx_select_int(x, y, s) (mix((x), (y), (s)))

#define brx_select_uint(x, y, s) (mix((x), (y), (s)))

#define brx_smoothstep(x, y, s) (smoothstep((x), (y), (s)))

#define brx_reflect(x, y) (reflect((x), (y)))

#define brx_byte_address_buffer_get_dimension(object) (uint((object)._internal_data.length()) * 4u)

#define brx_byte_address_buffer_load(object, location) ((object)._internal_data[(uint(location) >> 2)])

#define brx_byte_address_buffer_load2(object, location) uvec2(((object)._internal_data[(uint(location) >> 2)]), ((object)._internal_data[(uint(location) >> 2) + 1u]))

#define brx_byte_address_buffer_load3(object, location) uvec3(((object)._internal_data[(uint(location) >> 2)]), ((object)._internal_data[(uint(location) >> 2) + 1u]), ((object)._internal_data[(uint(location) >> 2) + 2u]))

#define brx_byte_address_buffer_load4(object, location) uvec4(((object)._internal_data[(uint(location) >> 2)]), ((object)._internal_data[(uint(location) >> 2) + 1u]), ((object)._internal_data[(uint(location) >> 2) + 2u]), ((object)._internal_data[(uint(location) >> 2) + 3u]))

#define brx_byte_address_buffer_store(object, location, data) (((object)._internal_data[(uint(location) >> 2)]) = data)

#define brx_byte_address_buffer_interlocked_compare_exchange(object, location, old_value, new_value) (atomicCompSwap(((object)._internal_data[(uint(location) >> 2)]), old_value, new_value))

#define brx_byte_address_buffer_store2(object, location, data)   \
    (((object)._internal_data[(uint(location) >> 2)]) = data.x); \
    (((object)._internal_data[(uint(location) >> 2) + 1u]) = data.y)

#define brx_byte_address_buffer_store3(object, location, data)        \
    (((object)._internal_data[(uint(location) >> 2)]) = data.x);      \
    (((object)._internal_data[(uint(location) >> 2) + 1u]) = data.y); \
    (((object)._internal_data[(uint(location) >> 2) + 2u]) = data.z)

#define brx_byte_address_buffer_store4(object, location, data)                                                                   \
    (((object)._internal_data[(uint(location) >> 2)]) = data.x)(((object)._internal_data[(uint(location) >> 2) + 1u]) = data.x); \
    (((object)._internal_data[(uint(location) >> 2) + 2u]) = data.z);                                                            \
    (((object)._internal_data[(uint(location) >> 2) + 3u]) = data.w)

#define brx_texture_2d_get_dimension(object, lod) (textureSize((object), (lod)))

#define brx_write_only_texture_2d_get_dimension(object) (imageSize((object)))

#define brx_sample_2d(object, s, location) (texture(sampler2D((object), (s)), (location)))

#define brx_sample_grad_2d(object, s, location, ddx, ddy) (textureGrad(sampler2D((object), (s)), (location), (ddx), (ddy)))

#define brx_sample_level_2d(object, s, location, lod) (textureLod(sampler2D((object), (s)), (location), (lod)))

#define brx_fetch_2d(object, location) (texelFetch((object), ivec2((location).xy), int((location).z)))

#define brx_store_2d(object, location, data) (imageStore((object), (location), (data)))

#define brx_texture_2d_array_get_dimension(object, lod) (textureSize((object), (lod)))

#define brx_sample_level_2d_array(object, s, location, lod) (textureLod(sampler2DArray((object), (s)), (location), (lod)))

#define brx_texture_3d_get_dimension(object, lod) (textureSize((object), (lod)))

#define brx_write_only_texture_3d_float4_get_dimension(object) (imageSize((object)))

#define brx_read_write_texture_3d_uint_get_dimension(object) (imageSize((object)))

#define brx_write_only_texture_3d_uint_get_dimension(object) (imageSize((object)))

#define brx_sample_level_3d(object, s, location, lod) (textureLod(sampler3D((object), (s)), (location), (lod)))

#define brx_fetch_3d(object, location) (texelFetch((object), ivec3((location).xyz), int((location).w)))

#define brx_load_3d_uint(object, location) ((imageLoad((object), (location))).x)

#define brx_store_3d_float4(object, location, data) (imageStore((object), (location), vec4(data)))

#define brx_store_3d_uint(object, location, data) (imageStore((object), (location), uvec4((data), 0, 0, 0)))

#define brx_texture_3d_uint_interlocked_compare_exchange(object, location, old_value, new_value) (imageAtomicCompSwap((object), (location), (old_value), (new_value)))

#if defined(BRX_ENABLE_WAVE_INTRINSICS) && BRX_ENABLE_WAVE_INTRINSICS

#define brx_wave_lane_count gl_SubgroupSize

#define brx_wave_active_sum(expr) (subgroupAdd(expr))

#endif

#if defined(BRX_ENABLE_RAY_TRACING) && BRX_ENABLE_RAY_TRACING

#define BRX_RAY_FLAG_NONE gl_RayFlagsNoneEXT

#define BRX_RAY_FLAG_CULL_BACK_FACING_TRIANGLES gl_RayFlagsCullBackFacingTrianglesEXT

#define brx_ray_query_trace_ray_inline(ray_query_object, acceleration_structure, ray_flags, instance_inclusion_mask, origin, t_min, direction, t_max) (rayQueryInitializeEXT((ray_query_object), (acceleration_structure), (ray_flags), (instance_inclusion_mask), (origin), (t_min), (direction), (t_max)))

#define brx_ray_query_proceed(ray_query_object) (rayQueryProceedEXT(ray_query_object))

#define BRX_CANDIDATE_NON_OPAQUE_TRIANGLE gl_RayQueryCandidateIntersectionTriangleEXT

#define brx_ray_query_candidate_type(ray_query_object) (rayQueryGetIntersectionTypeEXT((ray_query_object), false))

#define brx_ray_query_committed_non_opaque_triangle_hit(ray_query_object) (rayQueryConfirmIntersectionEXT((ray_query_object)))

#define BRX_COMMITTED_TRIANGLE_HIT gl_RayQueryCommittedIntersectionTriangleEXT

#define brx_ray_query_committed_status(ray_query_object) (rayQueryGetIntersectionTypeEXT((ray_query_object), true))

#define brx_ray_query_committed_instance_id(ray_query_object) (rayQueryGetIntersectionInstanceIdEXT((ray_query_object), true))

#define brx_ray_query_committed_object_to_world(ray_query_object) (rayQueryGetIntersectionObjectToWorldEXT((ray_query_object), true))

#define brx_ray_query_committed_geometry_index(ray_query_object) (rayQueryGetIntersectionGeometryIndexEXT((ray_query_object), true))

#define brx_ray_query_committed_primitive_index(ray_query_object) (rayQueryGetIntersectionPrimitiveIndexEXT((ray_query_object), true))

#define brx_ray_query_committed_triangle_barycentrics(ray_query_object) (rayQueryGetIntersectionBarycentricsEXT((ray_query_object), true))

#define brx_ray_query_committed_triangle_front_face(ray_query_object) (rayQueryGetIntersectionFrontFaceEXT((ray_query_object), true))

#define brx_non_uniform_resource_index(i) (nonuniformEXT((i)))

#endif

#elif defined(HLSL_VERSION) || defined(__HLSL_VERSION)

#define brx_bool bool

#define brx_bool4 bool4

#define brx_true true

#define brx_false false

#define brx_float float

#define brx_float2 float2

#define brx_float3 float3

#define brx_float4 float4

#define brx_float_inf (asfloat(0x7F800000u))

#define brx_is_float_nan(x) (isnan(x))

#define brx_is_inf_nan(x) (isinf(x))

#define brx_int_as_float(x) (asfloat(x))

#define brx_uint_as_float(x) (asfloat(x))

#define brx_double double

#define brx_double2 double2

#define brx_double3 double3

#define brx_double4 double4

#define brx_int int

#define brx_int2 int2

#define brx_int3 int3

#define brx_int4 int4

#define brx_float_as_int(x) (asint(x))

#define brx_uint uint

#define brx_uint2 uint2

#define brx_uint3 uint3

#define brx_uint4 uint4

#define brx_float_as_uint(x) (asuint(x))

#define brx_unpack_half2(x) (f16tof32(uint2(((x) & 0xffffu), ((x) >> 16))))

#define brx_column_major column_major

#define brx_float3x3 float3x3

#define brx_float3x4 float3x4

#define brx_float4x4 float4x4

#define brx_float3x3_from_columns(column0, column1, column2) (float3x3(float3((column0).x, (column1).x, (column2).x), float3((column0).y, (column1).y, (column2).y), float3((column0).z, (column1).z, (column2).z)))

#define brx_float3x3_from_rows(row0, row1, row2) (float3x3((row0), (row1), (row2)))

#define brx_float3x3_get_column(m, i) (float3(((m)[0][(i)]), ((m)[1][(i)]), ((m)[2][(i)])))

#define brx_float3x3_get_row(m, i) ((m)[(i)])

#if defined(BRX_ENABLE_RAY_TRACING) && BRX_ENABLE_RAY_TRACING

#define brx_ray_query RayQuery<RAY_FLAG_NONE>

#endif

#define brx_cbuffer(name, set, binding) cbuffer name : register(b##binding, space##set)

#define brx_read_only_byte_address_buffer(name, set, binding) ByteAddressBuffer name : register(t##binding, space##set)

#define brx_read_write_byte_address_buffer(name, set, binding) RWByteAddressBuffer name : register(u##binding, space##set)

#define brx_write_only_byte_address_buffer(name, set, binding) RWByteAddressBuffer name : register(u##binding, space##set)

#define brx_texture_2d(name, set, binding) Texture2D name : register(t##binding, space##set)

#define brx_texture_2d_uint(name, set, binding) Texture2D<uint4> name : register(t##binding, space##set)

#define brx_texture_2d_array(name, set, binding) Texture2DArray name : register(t##binding, space##set)

#define brx_texture_3d(name, set, binding) Texture3D name : register(t##binding, space##set)

#define brx_texture_3d_uint(name, set, binding) Texture3D<uint4> name : register(t##binding, space##set)

#define brx_sampler_state(name, set, binding) SamplerState name : register(s##binding, space##set)

#define brx_write_only_texture_2d(name, set, binding) RWTexture2D<float4> name : register(u##binding, space##set)

#define brx_write_only_texture_2d_uint(name, set, binding) RWTexture2D<uint4> name : register(u##binding, space##set)

#define brx_write_only_texture_3d_float4(name, set, binding) RWTexture3D<float4> name : register(u##binding, space##set)

#define brx_read_write_texture_3d_uint(name, set, binding) RWTexture3D<uint> name : register(u##binding, space##set)

#define brx_write_only_texture_3d_uint(name, set, binding) RWTexture3D<uint> name : register(u##binding, space##set)

#define brx_top_level_acceleration_structure(name, set, binding) RaytracingAccelerationStructure name : register(t##binding, space##set)

#define brx_read_only_byte_address_buffer_table(name, set, binding, count) ByteAddressBuffer name[count] : register(t##binding, space##set)

#define brx_read_write_byte_address_buffer_table(name, set, binding, count) RWByteAddressBuffer name[count] : register(u##binding, space##set)

#define brx_write_only_byte_address_buffer_table(name, set, binding, count) RWByteAddressBuffer name[count] : register(u##binding, space##set)

#define brx_texture_2d_table(name, set, binding, count) Texture2D name[count] : register(t##binding, space##set)

#define brx_texture_2d_uint_table(name, set, binding, count) Texture2D<uint4> name[count] : register(t##binding, space##set)

#define brx_sampler_state_table(name, set, binding, count) SamplerState name[count] : register(s##binding, space##set)

#define brx_write_only_texture_2d_table(name, set, binding, count) RWTexture2D<float4> name[count] : register(u##binding, space##set)

#define brx_write_only_texture_2d_uint_table(name, set, binding, count) RWTexture2D<uint4> name[count] : register(u##binding, space##set)

#define brx_top_level_acceleration_structure_table(name, set, binding, count) RaytracingAccelerationStructure name[count] : register(t##binding, space##set)

#if defined(BRX_ENABLE_RAY_TRACING) && BRX_ENABLE_RAY_TRACING

#define brx_read_only_byte_address_buffer_unbounded(name, set, binding) ByteAddressBuffer name[] : register(t##binding, space##set)

#define brx_texture_2d_unbounded(name, set, binding) Texture2D name[] : register(t##binding, space##set)

#define brx_texture_2d_uint_unbounded(name, set, binding) Texture2D<uint4> name[] : register(t##binding, space##set)

#endif

// https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html
#if 1
#define brx_root_signature_stringizing(string) #string
#define brx_root_signature_x_stringizing(string) brx_root_signature_stringizing(string)
#else
// comma is not supported by HLSL
#define brx_root_signature_stringizing(...) #__VA_ARGS__
#define brx_root_signature_x_stringizing(...) brx_root_signature_stringizing(__VA_ARGS__)
#endif

#define brx_root_signature_root_parameter_begin(name) brx_root_signature_x_stringizing(RootFlags(ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT)) ","

#define brx_root_signature_root_parameter_split ","

#define brx_root_signature_root_parameter_end

#define brx_root_signature_root_cbv(set, binding) brx_root_signature_x_stringizing(CBV(b##binding, space = set, visibility = SHADER_VISIBILITY_ALL))

#define brx_root_signature_root_descriptor_table_srv(set, binding, count) brx_root_signature_x_stringizing(DescriptorTable(SRV(t##binding, space = set, numdescriptors = count), visibility = SHADER_VISIBILITY_ALL))

#define brx_root_signature_root_descriptor_table_srv_unbounded(set, binding) brx_root_signature_x_stringizing(DescriptorTable(SRV(t##binding, space = set, numdescriptors = unbounded), visibility = SHADER_VISIBILITY_ALL))

#define brx_root_signature_root_descriptor_table_sampler(set, binding, count) brx_root_signature_x_stringizing(DescriptorTable(Sampler(s##binding, space = set, numdescriptors = count), visibility = SHADER_VISIBILITY_ALL))

#define brx_root_signature_root_descriptor_table_uav(set, binding, count) brx_root_signature_x_stringizing(DescriptorTable(UAV(u##binding, space = set, numdescriptors = count), visibility = SHADER_VISIBILITY_ALL))

#define brx_root_signature_root_descriptor_table_top_level_acceleration_structure(set, binding, count) brx_root_signature_x_stringizing(DescriptorTable(SRV(t##binding, space = set, numdescriptors = count), visibility = SHADER_VISIBILITY_ALL))

#define brx_root_signature(macro, name) [RootSignature(macro)]

#define brx_branch [branch]

#define brx_flatten [flatten]

#define brx_unroll [unroll]

#define brx_loop [loop]

#define brx_vertex_shader_parameter_begin(name) void name (

#define brx_vertex_shader_parameter_split ,

#define brx_vertex_shader_parameter_end(name) )

// TODO
#if 0

#define brx_vertex_shader_parameter_in_vertex_index in uint _internal_base_vertex_location : SV_STARTVERTEXLOCATION, in uint _internal_vertex_id : SV_VERTEXID

#define brx_vertex_index (_internal_base_vertex_location + _internal_vertex_id)

#define brx_vertex_shader_parameter_in_instance_index in uint _internal_base_instance_location : SV_STARTINSTANCELOCATION, in uint _internal_instance_id : SV_INSTANCEID

#define brx_instance_index (_internal_base_instance_location + _internal_instance_id)

#else

#define brx_vertex_shader_parameter_in_vertex_index in uint brx_vertex_index : SV_VERTEXID

#define brx_vertex_shader_parameter_in_instance_index in uint brx_instance_index : SV_INSTANCEID

#endif

#define brx_vertex_shader_parameter_in(type, name, location) in type name : LOCATION##location

#define brx_vertex_shader_parameter_out_position out float4 brx_position : SV_POSITION

#define brx_vertex_shader_parameter_out_cull_distance out float brx_cull_distance[2] : SV_CULLDISTANCE

#define brx_vertex_shader_parameter_out(type, name, location) out type name : LOCATION##location

#define brx_vertex_shader_parameter_flat_out(type, name, location) nointerpolation out type name : LOCATION##location

#define brx_early_depth_stencil [earlydepthstencil]

#define brx_pixel_shader_parameter_begin(name) void name (

#define brx_pixel_shader_parameter_split ,

#define brx_pixel_shader_parameter_end(name) )

#define brx_pixel_shader_parameter_in_sample_mask_in in uint brx_sample_mask_in : SV_COVERAGE

#define brx_pixel_shader_parameter_in_frag_coord in float4 brx_frag_coord : SV_POSITION

#define brx_pixel_shader_parameter_in_cull_distance in float brx_cull_distance[2] : SV_CULLDISTANCE

#define brx_pixel_shader_parameter_in(type, name, location) in type name : LOCATION##location

#define brx_pixel_shader_parameter_flat_in(type, name, location) nointerpolation in type name : LOCATION##location

#define brx_pixel_shader_parameter_out_depth out float brx_depth : SV_DEPTH

#define brx_pixel_shader_parameter_out(type, name, location) out type name : SV_TARGET##location

#define brx_num_threads(x, y, z) [numthreads(x, y, z)]

#define brx_group_shared groupshared

#define brx_group_memory_barrier_with_group_sync GroupMemoryBarrierWithGroupSync

#define brx_compute_shader_parameter_begin(name) void name (

#define brx_compute_shader_parameter_split ,

#define brx_compute_shader_parameter_end(name) )

#define brx_compute_shader_parameter_in_group_id in uint3 brx_group_id : SV_GroupID

#define brx_compute_shader_parameter_in_group_thread_id in uint3 brx_group_thread_id : SV_GroupThreadID

#define brx_compute_shader_parameter_in_group_index in uint brx_group_index : SV_GroupIndex

#define brx_compute_shader_parameter_in_dispatch_thread_id in uint3 brx_dispatch_thread_id : SV_DispatchThreadID

#define brx_array_constructor_begin(type, count) {

#define brx_array_constructor_split ,

#define brx_array_constructor_end }

#define brx_mul(x, y) (mul((x), (y)))

#define brx_dot(x, y) (dot((x), (y)))

#define brx_min(x, y) (min((x), (y)))

#define brx_max(x, y) (max((x), (y)))

#define brx_cross(x, y) (cross((x), (y)))

#define brx_pow(x, y) (pow((x), (y)))

#define brx_ln(x) (log((x)))

#define brx_log2(x) (log2((x)))

#define brx_exp(x) (exp((x)))

#define brx_ddx(x) (ddx((x)))

#define brx_ddy(x) (ddy((x)))

#define brx_abs(x) (abs((x)))

#define brx_length(x) (length((x)))

#define brx_normalize(x) (normalize(x))

#define brx_cos(x) (cos((x)))

#define brx_sin(x) (sin((x)))

#define brx_acos(x) (acos((x)))

#define brx_atan2(y, x) (atan2((y), (x)))

#define brx_sqrt(x) (sqrt((x)))

#define brx_rsqrt(x) (rsqrt((x)))

#define brx_firstbithigh(value) (firstbithigh(value))

#define brx_reversebits(value) (reversebits(value))

#define brx_sign(x) (sign((x)))

#define brx_floor(x) (floor(x))

#define brx_frac(x) (frac(x))

#define brx_round(x) (round(x))

#define brx_all(x) (all(x))

#define brx_any(x) (any(x))

#define brx_less_than(x, y) ((x) < (y))

#define brx_greater_than(x, y) ((x) > (y))

#define brx_greater_than_equal(x, y) ((x) >= (y))

#define brx_clamp(x, min, max) (clamp((x), (min), (max)))

#define brx_lerp(x, y, s) (lerp((x), (y), (s)))

// TODO: HLSL 2021
#define brx_select_float(a, b, s) (float4(((s).x ? (a).x : (b).x), ((s).y ? (a).y : (b).y), ((s).z ? (a).z : (b).z), ((s).w ? (a).w : (b).w)))

#define brx_select_int(a, b, s) (int4(((s).x ? (a).x : (b).x), ((s).y ? (a).y : (b).y), ((s).z ? (a).z : (b).z), ((s).w ? (a).w : (b).w)))

#define brx_select_uint(a, b, s) (uint4(((s).x ? (a).x : (b).x), ((s).y ? (a).y : (b).y), ((s).z ? (a).z : (b).z), ((s).w ? (a).w : (b).w)))

#define brx_smoothstep(x, y, s) (smoothstep((x), (y), (s)))

#define brx_reflect(x, y) (reflect((x), (y)))

inline uint _internal_brx_byte_address_buffer_get_dimension(ByteAddressBuffer object)
{
    uint out_dim;
    object.GetDimensions(out_dim);
    return out_dim;
}

#define brx_byte_address_buffer_get_dimension(object) (_internal_brx_byte_address_buffer_get_dimension((object)))

#define brx_byte_address_buffer_load(object, location) ((object).Load((location)))

#define brx_byte_address_buffer_load2(object, location) ((object).Load2((location)))

#define brx_byte_address_buffer_load3(object, location) ((object).Load3((location)))

#define brx_byte_address_buffer_load4(object, location) ((object).Load4((location)))

#define brx_byte_address_buffer_store(object, location, data) ((object).Store((location), (data)))

#define brx_byte_address_buffer_store2(object, location, data) ((object).Store2((location), (data)))

#define brx_byte_address_buffer_store3(object, location, data) ((object).Store3((location), (data)))

#define brx_byte_address_buffer_store4(object, location, data) ((object).Store4((location), (data)))

inline uint _internal_brx_byte_address_buffer_interlocked_compare_exchange(RWByteAddressBuffer object, int location, uint expected_old_value, uint new_value)
{
    uint out_actual_old_value;
    object.InterlockedCompareExchange(location, expected_old_value, new_value, out_actual_old_value);
    return out_actual_old_value;
}

#define brx_byte_address_buffer_interlocked_compare_exchange(object, location, old_value, new_value) (_internal_brx_byte_address_buffer_interlocked_compare_exchange((object), (location), (old_value), (new_value)))

inline int2 _internal_brx_texture_2d_get_dimension(Texture2D object, int mip_level)
{
    uint out_width;
    uint out_height;
    uint out_number_of_levels;
    object.GetDimensions(uint(mip_level), out_width, out_height, out_number_of_levels);

    return int2(out_width, out_height);
}

#define brx_texture_2d_get_dimension(object, lod) (_internal_brx_texture_2d_get_dimension((object), (lod)))

inline int2 _internal_brx_read_write_texture_2d_get_dimension(RWTexture2D<float4> object)
{
    uint out_width;
    uint out_height;
    object.GetDimensions(out_width, out_height);

    return int2(out_width, out_height);
}

#define brx_write_only_texture_2d_get_dimension(object) (_internal_brx_read_write_texture_2d_get_dimension((object)))

#define brx_sample_2d(object, s, location) ((object).Sample((s), (location)))

#define brx_sample_grad_2d(object, s, location, ddx, ddy) ((object).SampleGrad((s), (location), (ddx), (ddy)))

#define brx_sample_level_2d(object, s, location, lod) ((object).SampleLevel((s), (location), (lod)))

#define brx_fetch_2d(object, location) ((object).Load(location))

#define brx_store_2d(object, location, data) (((object)[location]) = (data))

inline int3 _internal_brx_texture_2d_array_get_dimension(Texture2DArray object, int mip_level)
{
    uint out_width;
    uint out_height;
    uint out_elements;
    uint out_number_of_levels;
    object.GetDimensions(uint(mip_level), out_width, out_height, out_elements, out_number_of_levels);

    return int3(out_width, out_height, out_elements);
}

#define brx_texture_2d_array_get_dimension(object, lod) (_internal_brx_texture_2d_array_get_dimension((object), (lod)))

#define brx_sample_level_2d_array(object, s, location, lod) ((object).SampleLevel((s), (location), (lod)))

inline int3 _internal_brx_texture_3d_get_dimension(Texture3D object, int mip_level)
{
    uint out_width;
    uint out_height;
    uint out_depth;
    uint out_number_of_levels;
    object.GetDimensions(uint(mip_level), out_width, out_height, out_depth, out_number_of_levels);

    return int3(out_width, out_height, out_depth);
}

#define brx_texture_3d_get_dimension(object, lod) (_internal_brx_texture_3d_get_dimension((object), (lod)))


inline int3 _internal_brx_read_write_texture_3d_float4_get_dimension(RWTexture3D<float4> object)
{
    uint out_width;
    uint out_height;
    uint out_depth;
    object.GetDimensions(out_width, out_height, out_depth);

    return int3(out_width, out_height, out_depth);
}

#define brx_write_only_texture_3d_float4_get_dimension(object) (_internal_brx_read_write_texture_3d_float4_get_dimension((object)))

inline int3 _internal_brx_read_write_texture_3d_uint_get_dimension(RWTexture3D<uint> object)
{
    uint out_width;
    uint out_height;
    uint out_depth;
    object.GetDimensions(out_width, out_height, out_depth);

    return int3(out_width, out_height, out_depth);
}

#define brx_read_write_texture_3d_uint_get_dimension(object) (_internal_brx_read_write_texture_3d_uint_get_dimension((object)))

#define brx_write_only_texture_3d_uint_get_dimension(object) (_internal_brx_read_write_texture_3d_uint_get_dimension((object)))

#define brx_sample_level_3d(object, s, location, lod) ((object).SampleLevel((s), (location), (lod)))

#define brx_fetch_3d(object, location) ((object).Load(location))

#define brx_load_3d_uint(object, location) ((object)[location])

#define brx_store_3d_float4(object, location, data) (((object)[location]) = (data))

#define brx_store_3d_uint(object, location, data) (((object)[location]) = (data))

inline uint _internal_texture_3d_uint_interlocked_compare_exchange(RWTexture3D<uint> object, brx_int3 location, uint expected_old_value, uint new_value)
{
    uint out_actual_old_value;
    InterlockedCompareExchange(object[location], expected_old_value, new_value, out_actual_old_value);
    return out_actual_old_value;
}

#define brx_texture_3d_uint_interlocked_compare_exchange(object, location, old_value, new_value) (_internal_texture_3d_uint_interlocked_compare_exchange((object), (location), (old_value), (new_value)))

#if defined(BRX_ENABLE_WAVE_INTRINSICS) && BRX_ENABLE_WAVE_INTRINSICS

#define brx_wave_lane_count (WaveGetLaneCount())

#define brx_wave_active_sum(expr) (WaveActiveSum(expr))

#endif

#if defined(BRX_ENABLE_RAY_TRACING) && BRX_ENABLE_RAY_TRACING

#define BRX_RAY_FLAG_NONE RAY_FLAG_NONE

#define BRX_RAY_FLAG_CULL_BACK_FACING_TRIANGLES RAY_FLAG_CULL_BACK_FACING_TRIANGLES

inline RayDesc _internal_brx_make_ray_desc(float3 origin, float t_min, float3 direction, float t_max)
{
    RayDesc ray_desc;
    ray_desc.Origin = origin;
    ray_desc.TMin = t_min;
    ray_desc.Direction = direction;
    ray_desc.TMax = t_max;
    return ray_desc;
}

#define brx_ray_query_trace_ray_inline(ray_query_object, acceleration_structure, ray_flags, instance_inclusion_mask, origin, t_min, direction, t_max) ((ray_query_object).TraceRayInline((acceleration_structure), (ray_flags), (instance_inclusion_mask), _internal_brx_make_ray_desc((origin), (t_min), (direction), (t_max))))

#define brx_ray_query_proceed(ray_query_object) ((ray_query_object).Proceed())

#define BRX_CANDIDATE_NON_OPAQUE_TRIANGLE CANDIDATE_NON_OPAQUE_TRIANGLE

#define brx_ray_query_candidate_type(ray_query_object) ((ray_query_object).CandidateType())

#define brx_ray_query_committed_non_opaque_triangle_hit(ray_query_object) ((ray_query_object).CommitNonOpaqueTriangleHit())

#define BRX_COMMITTED_TRIANGLE_HIT COMMITTED_TRIANGLE_HIT

#define brx_ray_query_committed_status(ray_query_object) ((ray_query_object).CommittedStatus())

#define brx_ray_query_committed_instance_id(ray_query_object) ((ray_query_object).CommittedInstanceID())

#define brx_ray_query_committed_object_to_world(ray_query_object) ((ray_query_object).CommittedObjectToWorld3x4())

#define brx_ray_query_committed_geometry_index(ray_query_object) ((ray_query_object).CommittedGeometryIndex())

#define brx_ray_query_committed_primitive_index(ray_query_object) ((ray_query_object).CommittedPrimitiveIndex())

#define brx_ray_query_committed_triangle_barycentrics(ray_query_object) ((ray_query_object).CommittedTriangleBarycentrics())

#define brx_ray_query_committed_triangle_front_face(ray_query_object) ((ray_query_object).CommittedTriangleFrontFace())

#define brx_non_uniform_resource_index(i) (NonUniformResourceIndex((i)))

#endif

#else
#error Unknown Compiler
#endif

#endif